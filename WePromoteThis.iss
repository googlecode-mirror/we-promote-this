; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "WePromoteThis"
#define MyAppVersion "1.1.3"
#define MyAppPublisher "WePromoteThis"
#define MyAppURL "http://www.WePromoteThis.com"
#define MyAppExeName "WePromoteThis.exe"
#define MyAppIconName "wepromotethis.ico"
#define TVCCAppName "T.V.C.C."
#define TVCCAppExeName "tvcc.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{D9801B61-D4BD-4789-BCEF-008DC63AA0B2}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
UsePreviousAppDir=yes
UsePreviousGroup=yes
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes
CreateAppDir=true

; We compare the setup version information here against
; the one on the server to check for a newer version.
VersionInfoVersion=1.1.3
VersionInfoTextVersion=1.1.3

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

#define ITDRoot ReadReg(HKEY_LOCAL_MACHINE,'Software\Sherlock Software\InnoTools\Downloader','InstallPath','')

#include ITDRoot+'\it_download.iss'

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "src/*"; Excludes: "\htdocs\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs
Source: "src/htdocs/CB/CBUtils/Includes/*"; DestDir: "{app}\htdocs\CB\CBUtils\Includes"; Flags: ignoreversion recursesubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Dirs]
Name: "{app}\htdocs\CB\Video\CreatedVideos"; Permissions: everyone-full
Name: "{app}\htdocs\CB\Log"; Permissions: everyone-full

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\bin\{#MyAppExeName}"; IconFilename: "{app}\icons\{#MyAppIconName}"
Name: "{group}\Uninstall"; Filename: "{app}\unins000.exe"; IconFilename: "{app}\icons\{#MyAppIconName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\bin\{#MyAppExeName}"; Tasks: desktopicon; IconFilename: "{app}\icons\{#MyAppIconName}"

[Run]
Filename: "{app}\tasks\createTask.bat"; Flags: runascurrentuser; StatusMsg: "Creating WePromoteThis task for when computer is idle..."
Filename: "{app}\bin\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: postinstall skipifsilent

[UninstallRun]
Filename: "{pf}\E.M. TVCC\unins000.exe"; Flags: runascurrentuser skipifdoesntexist;
Filename: "{app}\tasks\deleteTask.bat"; Flags: runascurrentuser skipifdoesntexist;

[UninstallDelete]
Type: filesandordirs; Name: "{app}";

[Registry]
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{pf}\E.M. TVCC\"; Check: NeedsAddPath(ExpandConstant('{pf}\E.M. TVCC\'))

[Code]
function NeedsAddPath(Param: string): boolean;
var
  OrigPath: string;
begin
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE,
    'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
    'Path', OrigPath)
  then begin
    Result := True;
    exit;
  end;
  // look for the path with leading and trailing semicolon
  // Pos() returns 0 if not found
  Result := Pos(';' + UpperCase(Param) + ';', ';' + UpperCase(OrigPath) + ';') = 0;  
  if Result = True then
     Result := Pos(';' + UpperCase(Param) + '\;', ';' + UpperCase(OrigPath) + ';') = 0; 
end;





{ This demo performs two downloads, one without ITD's GUI, and one with. It checks a website to
  find out what the most recent version of the installer is, and offers to download the new installer
  for the user.
}

procedure ExitProcess(exitCode:integer);
  external 'ExitProcess@kernel32.dll stdcall';

var progress:TOutputProgressWizardPage;

var
 NewInstallerPath:string;

procedure DownloadFinished(downloadPage:TWizardPage);
var ErrorCode:integer;
 (* text:string; *)
begin
 (*
	 Tell the user about the new installer. The message is pretty ugly if
	 NewInstallerPath is left at the default (The {tmp} directory)

	 text:=ITD_GetString(ITDS_Update_WillLaunchWithPath);

	 StringChangeEx(text, '%1', NewInstallerPath, true);

	 MsgBox(text, mbInformation, MB_OK);
 *)

 MsgBox(ITD_GetString(ITDS_Update_WillLaunch), mbInformation, MB_OK);

 if ShellExec('open', NewInstallerPath, '/updated',
   ExtractFilePath(NewInstallerPath), SW_SHOW, ewNoWait, ErrorCode) then
   ExitProcess(1);
end;

{ Compare the version string 'this' against the version string 'that'. A version
  string looks like: 1.3.2.100. Or possibly truncated: 1.3.

  Returns a positive number if this>that, 0 if this=that and a negative number
  if this<that.
}
function CompareVersions(this, that:string):integer;
var thisField, thatField:integer;
begin
 while (length(this)>0) or (length(that)>0) do begin
   if (pos('.',this)>0) then begin
     //Read the first field from the string
     thisField:=StrToIntDef(Copy(this, 1, pos('.',this)-1),0);
     //Remove the first field from the string
     this:=Copy(this, pos('.',this)+1, length(this));
   end else begin
     thisField:=StrToIntDef(this, 0);
     this:='';
   end;

   if (pos('.',that)>0) then begin
     //Read the first field from the string
     thatField:=StrToIntDef(Copy(that, 1, pos('.',that)-1),0);
     //Remove the first field from the string
     that:=Copy(that, pos('.',that)+1, length(that));
   end else begin
     thatField:=StrToIntDef(that, 0);
     that:='';
   end;

   if thisField>thatField then begin
    result:=1;
    exit;
   end else if thisField<thatField then begin
    result:=-1;
    exit;
   end;
 end;

 result:=0;
end;

procedure InitializeWizard();
var
  downloadPage:TWizardpage;
begin
 itd_init;

 //Where the new installer should be saved to, can be anywhere.
 NewInstallerPath:=ExpandConstant('{tmp}\NewInstaller.exe');

 {Create our own progress page for the initial download of a small
  textfile from the server which says what the latest version is}
 progress:=CreateOutputProgressPage(ITD_GetString(ITDS_Update_Caption),
    ITD_GetString(ITDS_Update_Description));

  //Create the ITD GUI so that we have it if we decide to download a new intaller version
 //downloadPage:=itd_downloadafter(wpWelcome);
 downloadPage:=itd_downloadafter(wpReady);

 // Files to download and where to place them
 ITD_AddFile('http://we-promote-this.googlecode.com/files/htdocs.exe', ExpandConstant('{tmp}\htdocs.exe'));
 ITD_AddFile('http://we-promote-this.googlecode.com/files/AV.exe', ExpandConstant('{tmp}\AV.exe'));
 ITD_AddFile('http://we-promote-this.googlecode.com/files/tvcc.exe', ExpandConstant('{tmp}\tvcc.exe'));
 

 {If the download of the new installer fails, we still want to give the
  user the option of continuing with the original installation}
 itd_setoption('UI_AllowContinue','1');


end;

procedure CurStepChanged(CurStep: TSetupStep);
var ErrorCode:integer;
begin
 if CurStep=ssInstall  then begin //Lets install those files that were downloaded for us
 end
 else if CurStep=ssPostInstall  then begin //Lets move the files after they have been unzipped
  RenameFile(expandconstant('{tmp}\htdocs.exe'),expandconstant('{app}\htdocs.exe'));
  RenameFile(expandconstant('{tmp}\AV.exe'),expandconstant('{app}\htdocs\CB\Video\AV.exe'));
  RenameFile(expandconstant('{tmp}\tvcc.exe'),expandconstant('{app}\tvcc.exe'));
  if ShellExec('open', expandconstant('{app}\htdocs.exe'), '-y > nul',
   ExtractFilePath(expandconstant('{app}')), SW_SHOW, ewWaitUntilTerminated, ErrorCode) then
  begin
    DeleteFile(expandconstant('{app}\htdocs.exe'));
  end;
  if ShellExec('open', expandconstant('{app}\htdocs\CB\Video\AV.exe'), '-y > nul',
   ExtractFilePath(expandconstant('{app}')), SW_SHOW, ewWaitUntilTerminated, ErrorCode) then
  begin
   DeleteFile(expandconstant('{app}\htdocs\CB\Video\AV.exe'));
  end;
  if ShellExec('open', expandconstant('{app}\tvcc.exe'), '',
   ExtractFilePath(expandconstant('{app}')), SW_SHOW, ewWaitUntilTerminated, ErrorCode) then
  begin
   DeleteFile(expandconstant('{app}\tvcc.exe'));
  end;
 end;
end;


function NextButtonClick(curPageID:integer):boolean;
var
 list, line:TStringList;
 newavail:boolean;
 i:integer;
 ourVersion:string;
 checkedSuccessfully:boolean;
 text:string;
begin
 result:=true;
  

 if curPageID=wpWelcome then begin

   //Are we being called by an updating setup? If so, don't ask to check for updates again!
   for i:=1 to ParamCount do begin
    if uppercase(ParamStr(i))='/UPDATED' then begin
     exit;
    end;
   end;

   //Offer to check for a new version for the user..
   if MsgBox(ITD_GetString(ITDS_Update_WantToCheck), mbConfirmation, MB_YESNO) = IDYES then
    begin
      wizardform.show;
      progress.Show;
      progress.SetText(ITD_GetString(ITDS_Update_Checking),'');
      progress.SetProgress(2,10);
      try
        newavail:=false;

        checkedSuccessfully:=false;
        GetVersionNumbersString(expandconstant('{srcexe}'), ourVersion);

        if itd_downloadfile('http://we-promote-this.googlecode.com/svn/trunk/google-code-downloads/latestver.txt',expandconstant('{tmp}\latestver.txt'))=ITDERR_SUCCESS then begin
          { Now read the version from that file and see if it is newer.
            The file has a really simple format:

            2.0,"http://www.sherlocksoftware.org/innotools/example3%202.0.exe"

            The installer version, a comma, and the URL where the new version can be downloaded.
          }
          list:=TStringList.create;
          try
            list.loadfromfile(expandconstant('{tmp}\latestver.txt'));

            if list.count>0 then begin
              line:=TStringList.create;
              try
                line.commatext:=list[0]; //Break down the line into its components

                if line.count>=2 then begin
                checkedSuccessfully:=true;
                if CompareVersions(trim(line[0]), trim(ourVersion))>0 then begin
                  //Version is newer
                    text:=ITD_GetString(ITDS_Update_NewAvailable);

                    StringChangeEx(text, '%1', ourVersion, true); //"Current version" part of the string
                    StringChangeEx(text, '%2', line[0], true); //"New version" part of the string

                    if MsgBox(text, mbConfirmation, MB_YESNO)=IDYES then begin
                      itd_addFile(trim(line[1]), NewInstallerPath);
                      {If the download succeeds, we will need to launch the new installer. The
                      callback is called if the download is successful.}
                      itd_afterSuccess:=@downloadfinished;
                    end;
                end else begin
                  MsgBox(ITD_GetString(ITDS_Update_NoNewAvailable), mbInformation, MB_OK);
                end;
                end;
              finally
                line.free;
              end;
            end;
          finally
            list.free;
          end;
        end;

        if not checkedSuccessfully then begin
          text:=ITD_GetString(ITDS_Update_Failed);
		  StringChangeEx(text, '%1', ourVersion, true);
          MsgBox(text, mbInformation, MB_OK);
        end;
      finally
        progress.Hide;
      end;
    end;
  end;
 end;